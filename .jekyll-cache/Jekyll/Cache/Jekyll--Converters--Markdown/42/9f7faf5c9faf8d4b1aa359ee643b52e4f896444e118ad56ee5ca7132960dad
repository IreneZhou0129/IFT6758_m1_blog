I"\<h2 id="question-1">Question 1</h2>
<h3 id="11">1.1</h3>
<p><br />Screenshot:
<br />
<img src="assets/q1_1.png" alt="screenshot" />
<br />
<br />Explanation:
<br /><br />
Issues:
<br />
Highest SV% players have very low shots against (SA), so the sample size is very small. Larger sample sizes (larger SA) could provide more accurate SV%, and provide a smaller margin of error.
<br /><br />
Fix issue:
<br />
We can only consider players who have at least the average number of SA, and then sort by SV%.</p>
<h3 id="12">1.2</h3>
<p><br />Screenshot:
<br />
<img src="assets/q1_2.png" alt="screenshot" />
<br /></p>
<h3 id="13">1.3</h3>
<p>In determining a goalie’s performance, other features that could potentially be useful may be Shots Against (SA), Goals-Against Average (GAA), Goalie Point Shares (GPS), and Games Played (GP) and Won (W).
<br /><br />
Having a high SA would mean a larger sample size for SV%. Larger sample sizes (larger SA) could provide more accurate SV%, and provide a smaller margin of error.
<br /><br />
GAA calculates the number of goals allowed per 60 minutes played. So, the lower GAA, the better performance of the goalie.
<br /><br />
GPS is an estimate of the number of points contributed by a player due to his play in goal. So beyond only metrics about the goals a goalie saved, this metric shows how many points they were able to help score. The higher GPA, the better performance of the goalie.
<br /><br />
At the end of the day, what matters after a game is winning. A goalie does a lot more to impact a game than what appears only in his post-game stats such as stopping “dump-ins”. Therefore, a higher win percentage by calculating W/GP could also be potentially useful in determining a goalie’s performance..</p>

<h2 id="question-2">Question 2</h2>

<p>First, we figured out the Game ID naming rules based on the API. Then we tested IDs and printed out JSON data on terminal.</p>

<p><img src="assets/q2_image_0.png" alt="screenshot" /></p>

<p>Next, within Python code, it loops over the years and saves data properly. The downloaded JSON files are categorized by game types and years.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>JSON_data
│
└───regular_seasons
│   └───2016
│       │   2016020001.json
│       │   ...
│   
└───playoffs
│   └───2016
│       │   2016030111.json
│       |   ...
</code></pre></div></div>

<h2 id="question-3">Question 3</h2>
<p><br />Screenshot:
<br />
<img src="assets/q3.png" alt="screenshot" />
<br />
<br />Explanation:
<br />
In this debug tool, user can select season from all year options, and select season from <code class="language-plaintext highlighter-rouge">regular_season</code> and <code class="language-plaintext highlighter-rouge">playoffs</code>. The tool finds out the game numbers and the event index, then adjusts slider sizes.
<br />
At the same time, the event shot coordinates shows on the rink image as a blue dot.</p>

<p>We used libray <code class="language-plaintext highlighter-rouge">matplotlib</code> to draw the coordinates and to add the background image, and used <code class="language-plaintext highlighter-rouge">ipwidgets</code> to add the interactive functionality.</p>

<h2 id="question-4">Question 4</h2>
<h3 id="41">4.1</h3>
<p><img src="assets/q4_1.png" alt="screenshot" /></p>

<h3 id="42">4.2</h3>
<p>We know that the strength of players on the ice starts off being even. So starting off, every event will be at even strength (5 on 5) until a penalty occurs. When a penalty occurs, the strength will change. The team whose player received a penalty will go to the penalty box leaving his team short handed and giving the other team a power play. This changes the strength of the players to 5 on 4. A penalty will last a certain number of minutes depending on the type of penalty. So, the strength of the players will change back to even automatically once the penalty expires, and we can check the game time of every event to know when to change the player strength back. Another possibility is if the team that has a power play scores a goal. Then, the strength will also change back to even.</p>
<h3 id="43">4.3</h3>

<h2 id="question-5">Question 5</h2>
<h3 id="51">5.1</h3>
<p><img src="assets/q5_1.png" alt="screenshot" /></p>
<h3 id="52">5.2</h3>
<h4 id="2018">2018</h4>
<p><img src="assets/q5_2_2018_1.png" alt="screenshot" />
<br />
<img src="assets/q5_2_2018_2.png" alt="screenshot" /></p>

<h4 id="2019">2019</h4>
<p><img src="assets/q5_2_2019_1.png" alt="screenshot" />
<br />
<img src="assets/q5_2_2019_2.png" alt="screenshot" /></p>

<h4 id="2020">2020</h4>
<p><img src="assets/q5_2_2020_1.png" alt="screenshot" />
<br />
<img src="assets/q5_2_2020_2.png" alt="screenshot" /></p>

<h3 id="53">5.3</h3>
<p><img src="assets/q5_3.png" alt="screenshot" /></p>

<h2 id="question-6">Question 6</h2>
<h3 id="61">6.1</h3>
<p>To TA: we built this interactive graph using Dash, and then deployed it on Heroku, it runs kind of slowly. 
<br /><br />
<a href="https://ift6758-q6.herokuapp.com/">Check the deployed graph</a>
<br /><br />
Once you select ‘year’ and ‘team’ from the dropdown, please wait for 10 seconds, then you’ll see the fancy graph! ;)</p>

<iframe src="https://ift6758-q6.herokuapp.com/" width="1000" height="800">

### 6.2
Closer to the net, easier to make a goal.

### 6.3

### 6.4 
</iframe>
:ET